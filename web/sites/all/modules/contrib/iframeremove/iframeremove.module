<?php


/*
* implementation of hook_help()
*/
function iframeremove_help($path, $arg) {
  switch ($path) {
    case "admin/help#customfilter":
      return '<p>'.t("Customized security filter to page contents. Removes unsafe iframes from page display.").'</p>';
  }
}


/**
* implementation of hook_filter_info()
* delcare that this module has a filter
*/
function iframeremove_filter_info() {
  $filters['iframeremove'] = array(
    'title' => t('iFrame removing filter'),
    'description' => t('Remove iframes from displaying according to hostnames. This is especially useful for sites that allow full HTML inputs.'),
    'process callback' => '_iframeremove_process_callback',
    'settings callback' => '_iframeremove_settings_callback',
  );
  return $filters;
}


/**
* callback function for hook_filter_info()
* implementation of hook_filter_FILTER_callback()
*/
function _iframeremove_process_callback($text, $filter, $format, $langcode, $cache, $cache_id) {
  return _iframeremove_iframe($text,
    _iframeremove_map_regex($filter->settings['iframeremove_whitelist']));
}


/**
* callback function for hook_filter_info()
* implementation of hook_filter_FILTER_settings()
*/
function _iframeremove_settings_callback($form, &$form_state, $filter, $format, $defaults, $filters) {
  $filter->settings += $defaults;
  $elements = array();

  $default_value = isset($filter->settings['iframeremove_whitelist']) ?
    $filter->settings['iframeremove_whitelist'] : array();
  $elements['iframeremove_whitelist'] = array(
    '#type' => 'textarea',
    '#title' => t('Whitelist'),
    '#description' => t('Only iframes of these domains are allowed. (One domain per line)'),
    '#default_value' => $default_value,
    '#value_callback' => '_iframeremove_whitelist_value_callback',
  );
  return $elements;
}


/*
* helper function
* value callback for hook_filter_FILTER_settings() field
* implementation of value callback of Form API
*/
function _iframeremove_whitelist_value_callback($element, $input = FALSE, $form_state = array()) {
  if ($input !== FALSE) {
    return _iframeremove_whitelist_encode(
      $form_state["input"]["filters"]["iframeremove"]["settings"]["iframeremove_whitelist"]
    );
  } else {
    return _iframeremove_whitelist_decode($element['#default_value']);
  }
}


/*
* helper function
* encode whitelist, from text, to array
* used in value callback
*/
function _iframeremove_whitelist_encode($text) {
  $text = trim($text);
  $array = !empty($text) ? preg_split("/([ \t]*(\n|\r\n)+[ \t]*)+/", $text) : array();
  return $array;
}


/*
* helper function
* called by _iframeremove_whitelist_value_callback()
* decode whitelist, from array, to text
*/
function _iframeremove_whitelist_decode($array) {
  $array = (array) $array;
  $text = implode("\r\n", $array);
  return $text;
}

/**
* helper function
* called by _iframeremove_iframe
*
* @param string $host domain name from iframe
* @param array<string> $whitelist array of domain name of whitelist
*/
function _iframeremove_array_match($host, $regex_list) {
  foreach ($regex_list as $regex) {
    if (preg_match($regex, $host)) return true;
  }
  return false;
}


/**
*
*
*/
function _iframeremove_map_regex($whitelist) {
  return array_map(function ($host) {
    return '/' . preg_replace('/\\\\\*/', '.*?', preg_quote($host)) . '/';
  }, $whitelist);
}


/*
* helper functions
* called by _iframeremove_whitelist_value_callback()
* remove all iframes which host is not within whitelist
*/
function _iframeremove_iframe($string, $whitelist_regex=array()) {
  // Check that there's an iframe in the text somewhere before continuing.
  // Otherwise we'd needlessly be loading every text string into a DOM object
  // when 99% of the time there's no iframes in them.
  if (preg_match('/<\s*iframe /mis', $string)) {
    // Now load the whole text string into a DOM object so we can properly
    // extract the iframe src. Using regex is way too messy and difficult
    // to ensure consistency.
    $dom = new DOMDocument();
    $dom->loadHTML($string);
    $to_remove = array();
    foreach ($dom->getElementsByTagName('iframe') as $iframe) {
      if ($iframe->hasAttribute('src')) {
        $src = $iframe->getAttribute('src');
        $host = parse_url($src, PHP_URL_HOST);

        // Remove the iframe if it's src is not valid or is not whitelisted.
        if (empty($host) || !_iframeremove_array_match($host, $whitelist_regex)) {
          $to_remove[] = $iframe;
        }
      }
    }

    foreach ($to_remove as $iframe) {
      $iframe->parentNode->removeChild($iframe);
    }

    // If any of the iframes were removed, we need to dump the new DOM to
    // HTML.
    if (sizeof($to_remove)>0) {
      return filter_dom_serialize($dom);
    }
  }
}
